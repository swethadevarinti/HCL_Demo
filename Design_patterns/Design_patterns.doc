Design principles
SOLID
•	S  - Single responsibility principle 
 A class should have one and only one responsibility to change.
•	O – open closed principles 
 Object should be open for extension and closed for  Modification.
•	L – Liskov substitution principle
 Objects of super class shall be replaced by subclass.
•	I – interface segregation principle 
 A class that should not be forced to implement an interface that it does not use.
•	D - Dependency inversion principle 
 
Single responsibility principle: Creating any class in java that should have only one responsibility.
If we don’t follow this rule below are the disadvantages.
1. Code redundancy
2. No clear separation between the responsibility of classes
Ex:
Public class openAccount{
1. Connect with the DB
2. Set the values to the object
3. Insert record into the DB.
}
Public class closeAccount{
1. Connect with the DB
2. Set the values to the object//values may vary in this case
3. Insert record into the DB.
}
In the above program  same code is repeated twice for getting the connection and inserting the record into the DB .
By following single responsibility rule we can make above program like below by segregating the responsibilities to different classes, so that we reduce the code redundancy and can make our code  more flexible to reuse. This is the advantage of first principle.

 AccountRepository  accountRepository = new AccountRepository();
Public class OpenAccount(){
2 // Set the values to the object
accountRepository.create();
}

Public class CloseAccount(){
2 // Set the values to the object
accountRepository.create();
}

Public class AccountRepository(){
public void create(){
1&3 //get the connection and store data into DB
}
}
O – open closed principles : If we create any method in class that method should open for extension but close for modification.
Source code is available in attached file(OpenCloseEx.java & OpenCloseEx1.java) for this scenario.
L – Liskov substitution principle: This principle we used in inheritance concept. By using inheritance concept only we can change the behavior of super class by passing subclass reference.
Below is the example:
class Vehicle{
	public void start() {
		System.out.println("Starting a vehicle");
	}
	public void stop() {
		System.out.println("Stoping a vehicle");
	}
}

class Car extends Vehicle{
	public void start() {
		System.out.println("Starting a car");
	}
	public void stop() {
		System.out.println("Stoping a Car");
	}
}

public class LiskovEx {
	
	static void testDrive(Vehicle vehicle) {
		vehicle.start();
		vehicle.stop();
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		testDrive(new Car());
		
	}
}
While calling the testDrive() method I’m passing the subclass reference instead of super class reference, so that super class reference will be replaced by sub class.
I – interface segregation principle : If we create any interface with some operations that interface should not force the class to implement the methods those are not used for it.
Source code is available in attached file(InterfaceSegrigation.java & InterfaceSegrigation1.java) for this rule.

 

